@page "/cart"
@using Microsoft.AspNetCore.Components.QuickGrid
@using StudyMart.Contract.ShoppingCart
@using StudyMart.Web.Services
@using StudyMart.Web.States
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject CartContainer CartContainer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CartService CartService

@if (_cartItems?.Count == 0 || _cartItems is null)
{
    <p class="text-center">Your cart is empty.</p>
}
else
{
    <h3>Cart Details:</h3>
    <QuickGrid Items="@_cartItems!.AsQueryable()">
        <PropertyColumn Property="@(c => c.Name)" Sortable="true"/>
        <PropertyColumn Property="@(c => c.Price)"/>
        <PropertyColumn Property="@(c => c.Quantity)"/>
        <PropertyColumn Property="@(c => c.Price * c.Quantity)" Title="Total"/>
    </QuickGrid>
    
    <div class="mt-3">
        <Button Color="ButtonColor.Primary" @onclick="CheckOut">Checkout</Button>
        <Button Color="ButtonColor.Danger" @onclick="ClearCart">Clear</Button>
    </div>
    
    <ConfirmDialog @ref="dialog" />
}

@code {
    private List<CartItemDto>? _cartItems;
    private ConfirmDialog dialog;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    private async Task LoadStateAsync()
    {
        var result = await ProtectedLocalStorage.GetAsync<List<CartItemDto>>("cart");
        _cartItems = result is { Success: true, Value: not null } ? result.Value : [];
    }

    private async Task ClearCart()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonText = "OK",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "CANCEL",
            NoButtonColor = ButtonColor.Danger
        };
        
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will clear the cart. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await ProtectedLocalStorage.DeleteAsync("cart");
            // Refresh page
            await LoadStateAsync();
            StateHasChanged();
            CartContainer.ClearCart();
        }
    }

    private async Task CheckOut()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            await CartService.AddToCartAsync(_cartItems!.Select(item => new AddToCartDto()
            {
                ProductId = item.ProductId,
                Quantity = item.Quantity
            }).ToList());
            // navigate to checkout page
            NavigationManager.NavigateTo("checkout");
        }
        else
        {
            // TODO: Display a message to the user to login first
            NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}", forceLoad: true);
        }
    }

}
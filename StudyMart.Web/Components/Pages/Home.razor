@page "/"
@using StudyMart.Web.Services
@using StudyMart.Web.ViewModels
@inject ProductService ProductService
@inject ILoggerFactory LoggerFactory
@inject ProtectedLocalStorage ProtectedLocalStorage
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="row d-flex flex-wrap">
    @if (_products is not null)
    {
        foreach (var product in _products)
        {
            <div class="col-md-3 col-lg-6 col-xl-4 py-5 d-flex">
                <div class="card text-black flex-fill">
                    <img src="@product.ImageUrl" class="card-img-top"
                        alt="@product.Name" />
                    <div class="card-body d-flex flex-column">
                        <div class="text-center">
                            <h5 class="card-title">@product.Name</h5>
                            <p class="text-muted mb-4">@product.CategoryName</p>
                        </div>
                        <div class="mt-auto">
                            <div class="d-flex justify-content-between">
                                <span>@product.Description</span><span>$@product.Price</span>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer text-end">
                        <button class="btn btn-primary mt-3" @onclick="async () => await AddToCart(product)">Add to Cart</button>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p><em>Loading...</em></p>
    }
</div>

@code
{
    private List<Product>? _products;


    protected override async Task OnInitializedAsync()
    {
        _products = await ProductService.GetProductsAsync();
    }

    private async Task AddToCart(Product product)
    {
        var result = await ProtectedLocalStorage.GetAsync<List<CartItem>>("cart");
        if (result.Success)
        {
            var items = result.Value ?? [];
            var existingItem = items.FirstOrDefault(i => i.ProductId == product.Id);
            if (existingItem != null)
            {
                existingItem.Quantity += 1;
            }
            else
            {
                items.Add(new CartItem
                {
                    ProductId = product.Id,
                    Name = product.Name,
                    Price = product.Price,
                    Quantity = 1
                });
            }
            
            await ProtectedLocalStorage.SetAsync("cart", items);
        }
        else
        {
            await ProtectedLocalStorage.SetAsync("cart", new List<CartItem>
            {
                new()
                {
                    ProductId = product.Id,
                    Name = product.Name,
                    Price = product.Price,
                    Quantity = 1
                }
            });
        }
    }
}
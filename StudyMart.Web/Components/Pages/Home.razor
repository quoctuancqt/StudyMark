@page "/"
@using StudyMart.Web.Services
@using StudyMart.Web.States
@using StudyMart.Web.ViewModels
@inject ProductService ProductService
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject CartContainer CartContainer
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="row d-flex flex-wrap">
    @if (_products is not null)
    {
        foreach (var product in _products)
        {
            <div class="col-md-3 col-lg-6 col-xl-3 py-5 d-flex">
                <Card Class="mb-4" Style="width:18rem;">
                    <img class="rounded-top" src="@product.ImageUrl" alt="@product.Name" />
                    <CardBody>
                        <CardTitle>@product.Name</CardTitle>
                        <CardSubTitle Class="mb-2 text-muted">@product.CategoryName</CardSubTitle>
                        <CardText><span>@product.Description</span><span>$@product.Price</span></CardText>
                    </CardBody>
                    <CardFooter Class="text-end">
                        <Button Color="ButtonColor.Primary" @onclick="async () => await AddToCart(product)"><i class="bi bi-cart-plus-fill"></i></Button>
                    </CardFooter>
                </Card>
            </div>
        }
    }
    else
    {
        <Spinner Type="SpinnerType.Dots" Class="me-3" Color="SpinnerColor.Primary" />
    }
</div>

@code
{
    private List<Product>? _products;


    protected override async Task OnInitializedAsync()
    {
        _products = await ProductService.GetProductsAsync();
    }

    private async Task AddToCart(Product product)
    {
        var result = await ProtectedLocalStorage.GetAsync<List<CartItem>>("cart");
        
        List<CartItem> items;
        
        if (result.Success)
        {
            items = result.Value ?? [];
            var existingItem = items.FirstOrDefault(i => i.ProductId == product.Id);
            if (existingItem != null)
            {
                existingItem.Quantity += 1;
            }
            else
            {
                items.Add(new CartItem
                {
                    ProductId = product.Id,
                    Name = product.Name,
                    Price = product.Price,
                    Quantity = 1
                });
            }
        }
        else
        {
            items =
            [
                new CartItem
                {
                    ProductId = product.Id,
                    Name = product.Name,
                    Price = product.Price,
                    Quantity = 1
                }
            ];
        }
        
        CartContainer.AddToCart();
        await ProtectedLocalStorage.SetAsync("cart", items);
    }
}
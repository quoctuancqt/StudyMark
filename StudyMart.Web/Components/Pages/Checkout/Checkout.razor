@page "/checkout"
@using Microsoft.AspNetCore.Authorization
@using StackExchange.Redis
@using StudyMart.Contract.Order
@using StudyMart.Contract.ShoppingCart
@using StudyMart.Web.Services
@using StudyMart.Web.States
@attribute [Authorize]
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject CartService CartService
@inject OrderService OrderService
@inject NavigationManager NavigationManager
@inject CartContainer CartContainer

@if (_cartItems?.Count == 0 || _cartItems is null)
{
    <Spinner Type="SpinnerType.Dots" Class="me-3" Color="SpinnerColor.Primary" />
}
else
{
    <div class="row">

        <div class="col-md-4 order-2">
            <h4 class="d-flex justify-content-between align-items-center mb-3">
                <span class=text-muted>Your Cart</span>
                <span class="badge rounded-pill bg-secondary">@_cartItems.Sum(c => c.Quantity)</span>
            </h4>
            @foreach (var item in _cartItems)
            {
                <li class="list-group-item d-flex justify-content-between lh-condensed">
                    <div>
                        <h6 class="my-0">@item.Name</h6>
                        <small class="text-muted">x @item.Quantity</small>
                    </div>
                    <span class="text-muted">$@(item.Price * item.Quantity)</span>
                </li>
            }

            <div class="card-footer d-flex justify-content-between">
                <span>Total (USD)</span>
                <strong>$@_cartItems!.Sum(c => c.Price * c.Quantity)</strong>
            </div>

        </div>

        <div class="col-md-8 order-1">
            <h4 class="mb-3">Billing Address</h4>
            <EditForm Model="_order" OnValidSubmit="CreateOrder" FormName="checkout-form">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="row">
                    <div class="col mb-4">
                        <label for="First name"> First Name </label>
                        <InputText id="email" class="form-control" @bind-Value="_order.FirstName" placeholder="First Name"/>
                    </div>
                    <div class="col mb-4">
                        <label for="La\st name"> Last Name </label>
                        <InputText id="email" class="form-control" @bind-Value="_order.LastName" placeholder="Last Name"/>
                    </div>
                </div>

                <div class="mb-4">
                    <label for="email">Email (optional)</label>
                    <InputText id="email" class="form-control" @bind-Value="_order.Email" placeholder="test@gmail.com" />
                </div>

                <div class="mb-4">
                    <label for="Address">Address</label>
                    <InputText id="email" class="form-control" @bind-Value="_order.Address" placeholder="Your primary address" />
                </div>

                <div class="mb-4">
                    <label for="Address2">Address 2 (optional)</label>
                    <InputText id="email" class="form-control" @bind-Value="_order.Address2" placeholder="You alternative address" />
                </div>

                <hr class="mb-4">

                <div class="d-grid gap-2">
                    <button class="btn btn-primary btn-lg" type="button" @onclick="CreateOrder">
                        Continue to Checkout
                    </button>
                </div>
            </EditForm>Ã¥
        </div>
    </div>
}

<ConfirmDialog @ref="dialog" />

@code {
    private List<CartItemDto>? _cartItems;
    private ConfirmDialog dialog;
    private CreateOrderDto _order = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await ProtectedLocalStorage.GetAsync<List<CartItemDto>>("cart");
        _cartItems = result is { Success: true, Value: not null } ? result.Value : [];
        await base.OnInitializedAsync();
    }

    private async Task CreateOrder()
    {
        var result = await CartService.AddToCartAsync(_cartItems!.Select(c => new AddToCartDto()
        {
            ProductId = c.ProductId,
            Quantity = c.Quantity
        }));

        if (result)
        {
            var order = await OrderService.CreateOrderAsync(_order);
            if (order is not null)
            {
                await ProtectedLocalStorage.DeleteAsync("cart");
                CartContainer.ClearCart(); 
                NavigationManager.NavigateTo("checkout-confirmation");
            }
        }
        else
        {
            await dialog.ShowAsync(
                title: "Opps!",
                message1: "Something went wrong");
        }
    }
}